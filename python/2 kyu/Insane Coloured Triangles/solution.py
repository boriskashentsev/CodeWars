import time

# {'R' : 0, 'G' : 1, 'B' : 2}

def newColor(color1, color2):
    if color1 == color2:
        return color1
    else:
        return 3 - color1 - color2
        
def triangle(row):
    length = len(row)
    array = list(map(lambda x: {'R' : 0, 'G' : 1, 'B' : 2}[x], row))
    while length > 1:
        for i in range(length-1):
            array[i] = newColor(array[i], array[i+1])
        length -= 1
    return 'RGB'[array[0]]

def testing(value1, value2):
    if (value1 == value2):
        print "Correct!"
    else:
        print "Nope. Expected %s, received %s" % (str(value2), str(value1))

def _test(cases):
    for _in, _out in cases:
        testing(triangle(_in), _out)

basic_cases = [
    #['B', 'B'],
    #['GB', 'R'],
    #['RRR', 'R'],
    #['RGBG', 'B'],
    #['RBRGBRB', 'G'],
    #['RBRGBRBGGRRRBGBBBGG', 'G'],
    ['RRRGRGBRGBBBBRRGRRBBBRRGBGBRBBRBRBRRGRBBGGGRGGRRBRGBRBGBBBRBGRGBGRGBGGGGGRRBGGRRRBBBGRRBBBBRGBRGRRGRBBGRBGBBRBRGBBBGBGRRGRRRGRBRBRGRGGGBGRRGRRGBGGBRRBGBGGBBBRBRGBRRBGRBBGRBRBRBRBBRRGBRBGGBBGRBRBRGBGRBBBGRGRBRBGRGGGBGRRRBRBBGRRBBRRRGGBBRRBRGBBGGBRRGBGBRBBBRGBRBGGBBRRGRRRGGGRRRGBGGRRRRRBBRBBGBRGGRBBBBBBBBGBRGBBGGBRGGRRRBBGBGRGRGGBRRRGRGGGGRRRGRBRRGBBBBRBRBRRGBGGBBGGBGRGBRGBGRRBRRRRBGBGBRRBRRGRGRGBRRGBGRBBBRRGBGRRBBRRBRBRRBRRBBBBGBGRRRBBGGGBBBBGBBBBGBBBRBGGGRBBRBGGGGGRBBGRGBRBBRBRRBGBRRRRBRBGGBBBRGBBBGGRBGGGBBGRBRBBGRRRRRBBGBRGGGGGRGBGBGGRGBRBBBGBBRBGRGRGGRBGGGRBBRGRGBRGGBRRBGBRBRBGBBBGBGGRBGRBBGGBGGBRRGRRGBBGRGGBRGGGGRGRBRGGRRRBBGBGGRRRRRRBRGGGRGRRRBRGBGBBBGRBBBGGBRGBBGRGGRRGRBRGRBBBGGGRRBGBGBBRRBGGBGBRBGRGBBGGBBGRGBRGRGBRGGRBBGBBRBBBRGRGGRBGBBBRGGBBGBBBBGRRGRBRRGBBRBRRBRRBRGRBGRRGBBGGGBGBGGBGGBRGRGRGGBBBBRBRRGRBBGGRGRRGBBRBBGGBBGBGGRBBGGRGGGBGRBBBBGRBGBRBBBBGGBGGGBGGGGGGBBGRGGBBRGGGRRGGRGBBRBRBBGBRRGGRRRRBBGGRRRGGGBRGGGGRGBGGRBGBRGRGRRRRGRBGBGRGRGBGGGRGGBGBBRGGBBRGBRRGBGGBBGBGRRRRBBGGRGGBRRRRRGBBGGRBRRBBGBBBRBBGBRRBRGGGGBRBBGRGGGGBBBRBGBBBGBRRGBBGBBGBBBGGBBBRBRGGBBRRGRGRRBGBGRGGRGBBRBBRRBBRBGBBBBRGBRRRRRGGGRGRBGGGRRGGGRBRGBGBRBGRRGRBGGBRRGBBRGBRBRRBRGRRRGGRGRBRGBBGBGGRRGRGRRRGGGRRGGRRRRGRBBGGGRGRRGBBRBRGGBRRRGRGGBGBGBRBRBBRGGGBRBGRRRBGGRBRGBRGGRBGRBRRBBBRGGRBGGRBBGBRGBGRBBBGGBRRRBBBGRRBRBRRBRRBRGRGBBRGBGBRBGGRRRBRBGGBBBGBBGRGRBRBRGBGBBRBRRRRBRRRRGGRBBRGGRBRBRRBRBRGBBRRBBRBBGGRGGBGBRGBGBRGGGGBBBBGRGRRGGRRBRGGGRBGGBRBBRRGBRBGGBBBBRGBRBGGRRBBGGBBRGGRRRRRRBGBGRBGGRBBBRBRBGGBBBGGRGBRBGBGBGBRRBRGBRGBBRGRGGBRGGRGBBRBGBBBRGGGBGRRGRBRRRRBGRRBBGRBRGGRGBGBGBRRBGRGRBBBGRGBGBGRGGGRGGRGBBRGGBBBGGBGBBRBRGRBGRBRRBBBBBGRRBGRBGGRRGRGRGBRBGRGRBGGGBBGRGGRBBRBRRBRGBRRGBGRRGGRBRRGBBGGRBGBRBRGGGGGGRRBGBGBRGBRGRRRGBBRRBGGRGRBBBGRRGBGRGRBGRBRGBBBRGRRGBGGRGBGBGBRGBRGRBGBRBGGRRGBBBBBGBRBGRBGGRGGBBGBBBBBBBBGBGRRBRRGGBRRGGBGBRRGBBRRBRRBBGGBRBGRGBBBRGBRBRRBBGRRGRRBRBBGRGGGGBBBRGBGRGGGGRBBRBGGBGRRGGRGGBBGRRGBGRGBGRBRRBRGBBRGGRRBRBBBGGBGGGGGGGGGGRBRRGBBRGRRGGRBBBBBGRRGBGRBBRBGGRBGRGBGGGBBBRGRRRGGRRGBGBGGBBRBBBBBBGBBBGBGGBGGGGRBGRRBRGRBBBRGGBGBBGGBBBBRBGGBGRGGGBGBBBBBGGBRGGBBBGGRBRBRRRRBBGGBGRBRRBGBRRGGBGGGRBRRBRBGRGRGBRRBRBBGRRBBGBBBBRRRBGRBRGGGBRBBGRBBGBRGRBRBRBRBGRRGBGBBGGRGRRRRRRBGBGRBRBRRRBGBBGGBBRRRBGRRBRRRBRGBBRRGBRBBGGRBBGGRRBBBBGGRGGRBGRRRGRGGBGBBRBGGBRGBBRRRRBRGGRRBGRBGBGBRBRBGGGBRBRBBBRBGBBBGBRBBBBBGGGGBGGRBBRGBRGGGBRBRRRGBBRGBGBBRRGRRBRBRRBRGBGGBGGGGGGGBRGGGBGGGBGRGGGRGRBRRRGGRGRGGRGRRRBBBGGGGRGBGBRGRGBBGBBBGBRRBBBRRGBBRRRRRGGBGRGBRRGBRRGBBGRBGBRGRBBRGBGGGGGGGBBGRBGRRRRGGGGBRRGBGBRBGRGRGGRGBBBRBGRGRGRBGGGBGBGRBRRGGGGBGGGGBRRRRRRBRGGBBRRRBRGRGBGBRBRGBRGGBRBBRBRBRRGGBRBBBGGBRBRGBBGRBBBGGBBRBRBBGBGGRGRGBRRGBRBBGRGGRRGGGBRBRBBBRGGRGRRRRRGBBGRRBGRBRBRGRGBRBRGRGGGBGGBGBGBRGRBBRBRRGGBBBRRGGRBBBGGBGRGRGBRGBRBGBGBBGGBBGRBGGBBRGRGBBRRGBBRGRRRRBBRBGGBBBGBBGGBGRRGBGBBRGRGGRGGBGBRRGRRGGGRBBGBBRBBBGBRRRBGGBBGGGRBRGRRGRBBBBBRBGBBGBRGRRGGBBGRRGGGBBBGGGGRGBGGBBGBBGRGBRGBRRBGBRRRBBRGBBGBBBBBRRGBBBGGBRGRGGRRBRBRGBRBRRBGBRBRRBGRBRGGGBBGGGRBRGRGRBRRBRBRGRRBGBRRRRGRRGGRGRBRBBBRRGBRGGGBRRRBBGRGBRRGGGGBBBRRGBBGBGRBGRRRRBRRGGBBBBRRGGGGGRGGGGRRBGBBBRGRRRGGGBBGGGRGGBRRGRBGBBBGGBGRBGBRGBBRGBGGBRRBRGGBGRBBBGBBBGRGGRBBRRBRBGRBGGGGBBBRGGGRGRBBBBRGRGGRGGBGRRRGGRGGGRRBBRBRBBGGGRRBRRGRRGBRGRBRBBRBGBRRBGGRGGGRGBRGBRGGRGRBRGGBGGRGGBBGBBGGGRBRBGGBGBBGRRRBGBBRRGBBBBGRGBBRGGBRBGBBGRBBBRRRGRGGBGBRBBGRRRGBRRBGGRRRBRRRBGBRGBRGGGBGRBRBRRRBGBRBGRRRGBBGRGBGBBBRRRGGGBGBRRRRRBGGBBGRRGBRBBRBGGBRBBRBRGBRBBGBRRBBBGBBBBRRGGGBBRGGBBRGRBRRGRRRGRBBRBBGGRBBGGBBGGBGGBGBRBRBGBRBBGGRRRRGGGGRBBRGBRGBRRRGBRGBBBRRBGRGBGRBBBRGBBRRGBGRBBBBBGGGBRBGGBRGBBBRGBRRBBRGRGRGGRGGRBRRBBGBBBBGGGBBGRBRRGRRGGBGRRBGBBRRGBGGRGGBBBGBRRBGBRBGBRBBGBRBRBBRRGBGRRBGBRRGBRBRRGGBRGBRRGRGRBRGBGRBRGGGBGRGBBBGGRGRBGBGBBRGGRRBRRGRRRGBRRGBRRRRGGRRRRRBGGGBBGBBBGBRBBBBGBBGRBGBBRBRBRBBGBRGBBGGBGBGGRRGBRBBRGBBBRRRBRRGBBRRBBRRGGGBRBBGBRBBBBGRBRBBBGRGBGRGRBGRBRBGGBGRRGBGBRGBRGRGGGBBRRRRBBBBRGBGBGBBGBRGGRRRRGRRRRGBBBBGRBRBGGRRGBRRRGGGBBGBRRRBGRRGRBRRGBRRGGBBBRGGRGBRGGRGRBBGRRRRGRRBBBBGGBBGGRGGRGRGRBBGBBRRBGRBBRRBGGBBGGBGGBBBGRBBBGBBGBRRRGBGRGGBBBGRGRRBGGBRGRRRRBBGBBRRGGRBRGRBBRRGBGBBBBBBBBGBRBGBGGGGGRRBGGBGRBGBBGBGBRBBRGGBRRGRBRBGGRRGRGRGRBGGBGRGRBBBGGRGBRRRBBGGGRRBGGGGBBBRBBGBRBRRGBBGGGRBGBGRGBRBRGGGBRGRGRGRBGBBRBBRRGGRRGGGRRBRBGBGBRBBGBRBBGGRBGBRRGBRGRBGGRBGBRGBGRBGBBGRGRGRGBGBBRBGGGGBBBGRGRRGRBRBRRGGRRRGRGGGGGGRRBGGBBBGBGGBRGGRGGGGBBRRGGRBRGRBGBRBRGBRBBBBBGRBGGBBGGRGRGRGRBBBBRBGGRGBBGRGBRGRBGRRRBGGGGRRGBBBBRBBBGGBGGGGBRBRGBBGGGBBBRRGRBBGRGGGBGBRBRBBRGGRGGGRGGRBRRBBRRGGRRGGRRGRGRRRRRRRRRGRRGBGBRGRRRGRGRRGRBBRGGGGBGBRBGBBGGGBBGGBBBRRRRBRBRGGGRGBGRRRBGBGRRGBGGRBGRRBRRRGGGRGGGGBRRGGBRBRBGRRBRRGBBGGRRGBBRGRGBBBRRGRRGBGRRGBRGBBGGGBRBRGBRBGRBGGBBBRGBRRGRRBRBRRGGRGRBGGRGGGBBRRBRBGBGRRGBGGBGRBRBGBGGBGRGGBRBRBBBBRRRRRBBGBGGGRRBBBGRBGRBBBBBBBRBBBBGGBBBGGRGGBGRBGGRGBRBBRGGBRGBGRRBBBGRBBBRGRBRGRBBBGGGBRGBRGRGRBBRRRGBRBRGRRGBGBRGRGGRBBBGGBRGBRGRBBGRBBBRRGGBRBBRBRBBBGGGBBBBBBGGBRBBRRGBBBBRBBGRGBRGRGRBRGBRBBRBGRRRRGRRRGBRBBRGBGGGGRRGBGRRGGGBGGBGGBRGGBGGBRBBBRBGBGBGBBGRGGRRBRRGBBRBGBBGRRRGRRRGBGRRGRGGRRGBRGRGBGBGBGGRBGBRRRBGGBBBGGRRBBBBGGBGRRBBGGBRGGBRRRGBBRRGBGBBGGGGRRBGRRGBGGBRGBGRRRRRRRGGRRBGBBGRGRRGRRBRGBRRRGGBGGGRGBGGRBGGGGGRBRRRRRRBRBRBBRRRRBGBRRBGGBGBBGBBGBGRRGBGGBGGBRGGBGGRGGRGRBGGGGRRBGBGGGRRGRRBGBGBGGBBBRGGGRGBRGGRGGBGGRRRBGRBBBBRBGGGGGBGRBGGRRBBRRRGGBRRGBBBBBGRBBBGRBBGGRRRGRBBRRRRGGRRRRRBBRRGGBRGBBGGGRBBBGGRBRGBRBBBRBBGGGRBRRRGBGBBRBGBGBBBGRGGGRRBRRGBGGGGBBGRBBBBRGGGBGBRGRGRRGBBBRRBBBRBBRBBBBGBGBRGGRGBGBRRBGGGGRRBGRGBBBGGRRGBBGBRBGBRBBRRGBBBGGRBBBGBBBRGRBGBBGRGBGBRBGGRBRRGBGRRBRRGGRRGBRBRBRBRRGBGBGRRRGRBRRGGRBBGGBGGGRBBGBBBRRRBGRRRGRBGBRGBBGGBBGBBRBGRGBGRRGBGGBRRBGGRBGRBGGRRGBBGGGGBBRGRGRGGBGGRRBGGGBGRRBRBGGRGGRBBRGGGBRGRRGRGRGGBRBRGRGBGRRBBRGBGBGGGRBRGBBGBRRGBBRGRBRBRRBRBGGGRRRGRBBRRGBBGRRRRBBGRBGGGGRBBRGBGGRGBGRGGRBRGBRRGRRGGGRGRBRBBRBGRRRGBRBBRBGGGBRRGRGBBRRBBBRBBBRGBRBBRRBGBBRRGBRBGBGRGBRRBBBBBBRRRBGGBBBGRGRGBRRRBBBBBRBGGRBGRRGGRBRGBGRBBRRGBRBGBGRRGRGBRGRBGGBGBGRBGGGBBBGRBBRBGBBRGRRBBGBRRRBRGGRRGGRGGRGRRRBRRBRBGRBGGGRGRBGGRRRRRBBGBBGBRBBBRGRGBGGGRBRGRBBBRBBBRGRBBRGRGBRRGGGRBRRBGBGGRRRRRGBBGBRGGBGRGGBBGBRGGBRRBRRGGBBRBRRBBRGRBRRGGRGRGBGGRBBRGRGBBGGRGBRBGRGBRRGRRBRBBRBGRBGRRRRGBRRBBBGGGGGRRGBBBBBBGRBGRRGBRRGRGGRBGRRRRBBGBBRBBBBGBGGGRGBGGBRRGGGRBGRGGBGBRRBBBBRBRBBBBRBBBBRGRGRRRGGGRRGBRRGGBBRBRGGRBRGRRGRBGBGGGBBBBGGGRGGRGGRGRGBBBGRGGBGGRRBGBBGGGGRBRGGGRGGGGBRGRRRRGRBGGRGGGBRGBRRRGGBBGBRGBGGRGRRBRBRRBBRBGBGRGRBRGGRGBGRBRBRGGBBGGBRBBRBRGBGGRRGRBRGRGBBBRGRBGBGBBGRRGGGBGRBBBBGBRRBRRGRGBRRRGRBRRGBGBRGGBGBGRRGGBGGGBRBBRRRGGBBBRGBRGGRBBRBGBGGBBBGGBBRGGBBBBBRRRBGRGGRBRBRBGRGBGGGBBBRGBGBGRRGBBBGGGGRRBGRGBGGBRGBGGGGGBRRBRBBGBBBGGBRRBGGRGRRRRGRBRGBGRBRBGRRBRRRGGBBBRBRGRBRRBGBGBBRBRRBBBRGGGRBBRGBRGBBGBRRBGGRGGGRRBGBGRRGRGRBBBBRBBRGBRRGBBRRBGRRBBGBGGGGBRRGBBRBRRGGRBGBRGGBGRBBRBRRBBRRBGBBGBBRRGRRRBBBGRGBRGBGRBBBRBGBGRRRRRGBBBRRGRRBRBRRRGGBRRGGBGGRGGBGRRRGBBRGBRGBBBGBRBRBRBBBGRGGGGRGBBBRBBRBBGGRRBBGRBBRBRBBRRRRBRRRRBGGRRRGGRGRGGRGRBRBBBRRRBGBBRRBBRRGGGGRGRRRGRGRGRBRGGGGRBRBGBGBRRRGBBRGRBBBBBGBRRGGBBBGBRRBGRGRRGBGBGRGGRGGGRGBGGGRGBRRRGBGGGGBBGBRBGRRBRGBGBGBRBRBBRRBGBGBBRGBBRRBGRBBBRGBRBRBGGRBGRRGRRRGGRGRBBGGBGBGRBRRBGBGGGBGGBRGGGBGBBRBRBRGRGGBBBGGBBBGBRBRGBGBRGRGBRRBRBRRGBBRBBBBBRGBGRGBBRBGBRRBRGGRBRRRGGGBRRRRGRGBGGBGRBRGBBBRRRGBGBGBBBRGBGRRGGBBBBGRGRBBGRBGGRGBBRBBBRBRBBRRRGBBRRRBBGGRRGBBRBRGBBGGGRRGBBRGRBRGGGBBBRBRGRRRRGBBRGGGBGRBBRRRGGRRRBBBRGBGRRGBBBGBGRRRBRBGBBGBRGGGBRRRGGGRRRGRRBGGGRGRGGRRGRGRRRRBGBBGBBRRGRGRBGBGRGBGBGRBRRBRRRBBGGGBRGBGGRRB', 'G'],
]

t0 = time.time()
_test(basic_cases)
t1 = time.time()
print(t1-t0)