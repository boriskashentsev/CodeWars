import time

# {'R' : 0, 'G' : 1, 'B' : 2}
dictionary =    { 0 : 0,
                  1 :  [[1, 1, 1],
                        [1, 2, 0], 
                        [1, 0, 0]],
                  2 :  [[2, 2, 2],
                        [2, 1, 0], 
                        [2, 0, 0]]}

def plusOne(array):
    i = 0
    while array[i] == 2:
        array[i] = 0
        i += 1
    array[i] += 1
    return array

def minusOne(array):
    i = 0
    while array[i] == 0:
        array[i] = 2
        i += 1
    array[i] -= 1
    return array

def coefficient(x, y):
    matrix = 1
    for i in reversed(range(len(x))):
        matrix = dictionary[matrix][x[i]][y[i]]
        if matrix == 0:
            return 0
    return matrix

def triangle(row):
    length = len(row)
    array = list(map(lambda x: {'R' : 0, 'G' : 1, 'B' : 2}[x], row))

    if length == 1:
        return row

    x = []
    y = []
    length -= 1
    while length > 0:
        x.append(length % 3)
        y.append(0)
        length = int(length / 3)

    number = 0
    length = len(row)
    for i in range(length):
        coeff = coefficient(x,y)
        if length % 2:
            number += coeff * array[i]
        else :
            number -= coeff * array[i]
        if i != length - 1 :
            x = minusOne(x)
            y = plusOne(y)
    return 'RGB'[number % 3]


def testing(value1, value2):
    if (value1 == value2):
        print "Correct!"
    else:
        print "Nope. Expected %s, received %s" % (str(value2), str(value1))

def _test(cases):
    for _in, _out in cases:
        testing(triangle(_in), _out)

basic_cases = [
    # ['B', 'B'],
    # ['GB', 'R'],
    # ['RRR', 'R'],
    # ['RGBG', 'B'],
    # ['GRGBG', 'G'],
    # ['RBRGBRB', 'G'],
    # ['RBRGBRBGGRRRBGBBBGG', 'G'],
    # ['RRRRRRRRRRRRRRRRRRRRRRRRR','R'],
    ['RRRGRGBRGBBBBRRGRRBBBRRGBGBRBBRBRBRRGRBBGGGRGGRRBRGBRBGBBBRBGRGBGRGBGGGGGRRBGGRRRBBBGRRBBBBRGBRGRRGRBBGRBGBBRBRGBBBGBGRRGRRRGRBRBRGRGGGBGRRGRRGBGGBRRBGBGGBBBRBRGBRRBGRBBGRBRBRBRBBRRGBRBGGBBGRBRBRGBGRBBBGRGRBRBGRGGGBGRRRBRBBGRRBBRRRGGBBRRBRGBBGGBRRGBGBRBBBRGBRBGGBBRRGRRRGGGRRRGBGGRRRRRBBRBBGBRGGRBBBBBBBBGBRGBBGGBRGGRRRBBGBGRGRGGBRRRGRGGGGRRRGRBRRGBBBBRBRBRRGBGGBBGGBGRGBRGBGRRBRRRRBGBGBRRBRRGRGRGBRRGBGRBBBRRGBGRRBBRRBRBRRBRRBBBBGBGRRRBBGGGBBBBGBBBBGBBBRBGGGRBBRBGGGGGRBBGRGBRBBRBRRBGBRRRRBRBGGBBBRGBBBGGRBGGGBBGRBRBBGRRRRRBBGBRGGGGGRGBGBGGRGBRBBBGBBRBGRGRGGRBGGGRBBRGRGBRGGBRRBGBRBRBGBBBGBGGRBGRBBGGBGGBRRGRRGBBGRGGBRGGGGRGRBRGGRRRBBGBGGRRRRRRBRGGGRGRRRBRGBGBBBGRBBBGGBRGBBGRGGRRGRBRGRBBBGGGRRBGBGBBRRBGGBGBRBGRGBBGGBBGRGBRGRGBRGGRBBGBBRBBBRGRGGRBGBBBRGGBBGBBBBGRRGRBRRGBBRBRRBRRBRGRBGRRGBBGGGBGBGGBGGBRGRGRGGBBBBRBRRGRBBGGRGRRGBBRBBGGBBGBGGRBBGGRGGGBGRBBBBGRBGBRBBBBGGBGGGBGGGGGGBBGRGGBBRGGGRRGGRGBBRBRBBGBRRGGRRRRBBGGRRRGGGBRGGGGRGBGGRBGBRGRGRRRRGRBGBGRGRGBGGGRGGBGBBRGGBBRGBRRGBGGBBGBGRRRRBBGGRGGBRRRRRGBBGGRBRRBBGBBBRBBGBRRBRGGGGBRBBGRGGGGBBBRBGBBBGBRRGBBGBBGBBBGGBBBRBRGGBBRRGRGRRBGBGRGGRGBBRBBRRBBRBGBBBBRGBRRRRRGGGRGRBGGGRRGGGRBRGBGBRBGRRGRBGGBRRGBBRGBRBRRBRGRRRGGRGRBRGBBGBGGRRGRGRRRGGGRRGGRRRRGRBBGGGRGRRGBBRBRGGBRRRGRGGBGBGBRBRBBRGGGBRBGRRRBGGRBRGBRGGRBGRBRRBBBRGGRBGGRBBGBRGBGRBBBGGBRRRBBBGRRBRBRRBRRBRGRGBBRGBGBRBGGRRRBRBGGBBBGBBGRGRBRBRGBGBBRBRRRRBRRRRGGRBBRGGRBRBRRBRBRGBBRRBBRBBGGRGGBGBRGBGBRGGGGBBBBGRGRRGGRRBRGGGRBGGBRBBRRGBRBGGBBBBRGBRBGGRRBBGGBBRGGRRRRRRBGBGRBGGRBBBRBRBGGBBBGGRGBRBGBGBGBRRBRGBRGBBRGRGGBRGGRGBBRBGBBBRGGGBGRRGRBRRRRBGRRBBGRBRGGRGBGBGBRRBGRGRBBBGRGBGBGRGGGRGGRGBBRGGBBBGGBGBBRBRGRBGRBRRBBBBBGRRBGRBGGRRGRGRGBRBGRGRBGGGBBGRGGRBBRBRRBRGBRRGBGRRGGRBRRGBBGGRBGBRBRGGGGGGRRBGBGBRGBRGRRRGBBRRBGGRGRBBBGRRGBGRGRBGRBRGBBBRGRRGBGGRGBGBGBRGBRGRBGBRBGGRRGBBBBBGBRBGRBGGRGGBBGBBBBBBBBGBGRRBRRGGBRRGGBGBRRGBBRRBRRBBGGBRBGRGBBBRGBRBRRBBGRRGRRBRBBGRGGGGBBBRGBGRGGGGRBBRBGGBGRRGGRGGBBGRRGBGRGBGRBRRBRGBBRGGRRBRBBBGGBGGGGGGGGGGRBRRGBBRGRRGGRBBBBBGRRGBGRBBRBGGRBGRGBGGGBBBRGRRRGGRRGBGBGGBBRBBBBBBGBBBGBGGBGGGGRBGRRBRGRBBBRGGBGBBGGBBBBRBGGBGRGGGBGBBBBBGGBRGGBBBGGRBRBRRRRBBGGBGRBRRBGBRRGGBGGGRBRRBRBGRGRGBRRBRBBGRRBBGBBBBRRRBGRBRGGGBRBBGRBBGBRGRBRBRBRBGRRGBGBBGGRGRRRRRRBGBGRBRBRRRBGBBGGBBRRRBGRRBRRRBRGBBRRGBRBBGGRBBGGRRBBBBGGRGGRBGRRRGRGGBGBBRBGGBRGBBRRRRBRGGRRBGRBGBGBRBRBGGGBRBRBBBRBGBBBGBRBBBBBGGGGBGGRBBRGBRGGGBRBRRRGBBRGBGBBRRGRRBRBRRBRGBGGBGGGGGGGBRGGGBGGGBGRGGGRGRBRRRGGRGRGGRGRRRBBBGGGGRGBGBRGRGBBGBBBGBRRBBBRRGBBRRRRRGGBGRGBRRGBRRGBBGRBGBRGRBBRGBGGGGGGGBBGRBGRRRRGGGGBRRGBGBRBGRGRGGRGBBBRBGRGRGRBGGGBGBGRBRRGGGGBGGGGBRRRRRRBRGGBBRRRBRGRGBGBRBRGBRGGBRBBRBRBRRGGBRBBBGGBRBRGBBGRBBBGGBBRBRBBGBGGRGRGBRRGBRBBGRGGRRGGGBRBRBBBRGGRGRRRRRGBBGRRBGRBRBRGRGBRBRGRGGGBGGBGBGBRGRBBRBRRGGBBBRRGGRBBBGGBGRGRGBRGBRBGBGBBGGBBGRBGGBBRGRGBBRRGBBRGRRRRBBRBGGBBBGBBGGBGRRGBGBBRGRGGRGGBGBRRGRRGGGRBBGBBRBBBGBRRRBGGBBGGGRBRGRRGRBBBBBRBGBBGBRGRRGGBBGRRGGGBBBGGGGRGBGGBBGBBGRGBRGBRRBGBRRRBBRGBBGBBBBBRRGBBBGGBRGRGGRRBRBRGBRBRRBGBRBRRBGRBRGGGBBGGGRBRGRGRBRRBRBRGRRBGBRRRRGRRGGRGRBRBBBRRGBRGGGBRRRBBGRGBRRGGGGBBBRRGBBGBGRBGRRRRBRRGGBBBBRRGGGGGRGGGGRRBGBBBRGRRRGGGBBGGGRGGBRRGRBGBBBGGBGRBGBRGBBRGBGGBRRBRGGBGRBBBGBBBGRGGRBBRRBRBGRBGGGGBBBRGGGRGRBBBBRGRGGRGGBGRRRGGRGGGRRBBRBRBBGGGRRBRRGRRGBRGRBRBBRBGBRRBGGRGGGRGBRGBRGGRGRBRGGBGGRGGBBGBBGGGRBRBGGBGBBGRRRBGBBRRGBBBBGRGBBRGGBRBGBBGRBBBRRRGRGGBGBRBBGRRRGBRRBGGRRRBRRRBGBRGBRGGGBGRBRBRRRBGBRBGRRRGBBGRGBGBBBRRRGGGBGBRRRRRBGGBBGRRGBRBBRBGGBRBBRBRGBRBBGBRRBBBGBBBBRRGGGBBRGGBBRGRBRRGRRRGRBBRBBGGRBBGGBBGGBGGBGBRBRBGBRBBGGRRRRGGGGRBBRGBRGBRRRGBRGBBBRRBGRGBGRBBBRGBBRRGBGRBBBBBGGGBRBGGBRGBBBRGBRRBBRGRGRGGRGGRBRRBBGBBBBGGGBBGRBRRGRRGGBGRRBGBBRRGBGGRGGBBBGBRRBGBRBGBRBBGBRBRBBRRGBGRRBGBRRGBRBRRGGBRGBRRGRGRBRGBGRBRGGGBGRGBBBGGRGRBGBGBBRGGRRBRRGRRRGBRRGBRRRRGGRRRRRBGGGBBGBBBGBRBBBBGBBGRBGBBRBRBRBBGBRGBBGGBGBGGRRGBRBBRGBBBRRRBRRGBBRRBBRRGGGBRBBGBRBBBBGRBRBBBGRGBGRGRBGRBRBGGBGRRGBGBRGBRGRGGGBBRRRRBBBBRGBGBGBBGBRGGRRRRGRRRRGBBBBGRBRBGGRRGBRRRGGGBBGBRRRBGRRGRBRRGBRRGGBBBRGGRGBRGGRGRBBGRRRRGRRBBBBGGBBGGRGGRGRGRBBGBBRRBGRBBRRBGGBBGGBGGBBBGRBBBGBBGBRRRGBGRGGBBBGRGRRBGGBRGRRRRBBGBBRRGGRBRGRBBRRGBGBBBBBBBBGBRBGBGGGGGRRBGGBGRBGBBGBGBRBBRGGBRRGRBRBGGRRGRGRGRBGGBGRGRBBBGGRGBRRRBBGGGRRBGGGGBBBRBBGBRBRRGBBGGGRBGBGRGBRBRGGGBRGRGRGRBGBBRBBRRGGRRGGGRRBRBGBGBRBBGBRBBGGRBGBRRGBRGRBGGRBGBRGBGRBGBBGRGRGRGBGBBRBGGGGBBBGRGRRGRBRBRRGGRRRGRGGGGGGRRBGGBBBGBGGBRGGRGGGGBBRRGGRBRGRBGBRBRGBRBBBBBGRBGGBBGGRGRGRGRBBBBRBGGRGBBGRGBRGRBGRRRBGGGGRRGBBBBRBBBGGBGGGGBRBRGBBGGGBBBRRGRBBGRGGGBGBRBRBBRGGRGGGRGGRBRRBBRRGGRRGGRRGRGRRRRRRRRRGRRGBGBRGRRRGRGRRGRBBRGGGGBGBRBGBBGGGBBGGBBBRRRRBRBRGGGRGBGRRRBGBGRRGBGGRBGRRBRRRGGGRGGGGBRRGGBRBRBGRRBRRGBBGGRRGBBRGRGBBBRRGRRGBGRRGBRGBBGGGBRBRGBRBGRBGGBBBRGBRRGRRBRBRRGGRGRBGGRGGGBBRRBRBGBGRRGBGGBGRBRBGBGGBGRGGBRBRBBBBRRRRRBBGBGGGRRBBBGRBGRBBBBBBBRBBBBGGBBBGGRGGBGRBGGRGBRBBRGGBRGBGRRBBBGRBBBRGRBRGRBBBGGGBRGBRGRGRBBRRRGBRBRGRRGBGBRGRGGRBBBGGBRGBRGRBBGRBBBRRGGBRBBRBRBBBGGGBBBBBBGGBRBBRRGBBBBRBBGRGBRGRGRBRGBRBBRBGRRRRGRRRGBRBBRGBGGGGRRGBGRRGGGBGGBGGBRGGBGGBRBBBRBGBGBGBBGRGGRRBRRGBBRBGBBGRRRGRRRGBGRRGRGGRRGBRGRGBGBGBGGRBGBRRRBGGBBBGGRRBBBBGGBGRRBBGGBRGGBRRRGBBRRGBGBBGGGGRRBGRRGBGGBRGBGRRRRRRRGGRRBGBBGRGRRGRRBRGBRRRGGBGGGRGBGGRBGGGGGRBRRRRRRBRBRBBRRRRBGBRRBGGBGBBGBBGBGRRGBGGBGGBRGGBGGRGGRGRBGGGGRRBGBGGGRRGRRBGBGBGGBBBRGGGRGBRGGRGGBGGRRRBGRBBBBRBGGGGGBGRBGGRRBBRRRGGBRRGBBBBBGRBBBGRBBGGRRRGRBBRRRRGGRRRRRBBRRGGBRGBBGGGRBBBGGRBRGBRBBBRBBGGGRBRRRGBGBBRBGBGBBBGRGGGRRBRRGBGGGGBBGRBBBBRGGGBGBRGRGRRGBBBRRBBBRBBRBBBBGBGBRGGRGBGBRRBGGGGRRBGRGBBBGGRRGBBGBRBGBRBBRRGBBBGGRBBBGBBBRGRBGBBGRGBGBRBGGRBRRGBGRRBRRGGRRGBRBRBRBRRGBGBGRRRGRBRRGGRBBGGBGGGRBBGBBBRRRBGRRRGRBGBRGBBGGBBGBBRBGRGBGRRGBGGBRRBGGRBGRBGGRRGBBGGGGBBRGRGRGGBGGRRBGGGBGRRBRBGGRGGRBBRGGGBRGRRGRGRGGBRBRGRGBGRRBBRGBGBGGGRBRGBBGBRRGBBRGRBRBRRBRBGGGRRRGRBBRRGBBGRRRRBBGRBGGGGRBBRGBGGRGBGRGGRBRGBRRGRRGGGRGRBRBBRBGRRRGBRBBRBGGGBRRGRGBBRRBBBRBBBRGBRBBRRBGBBRRGBRBGBGRGBRRBBBBBBRRRBGGBBBGRGRGBRRRBBBBBRBGGRBGRRGGRBRGBGRBBRRGBRBGBGRRGRGBRGRBGGBGBGRBGGGBBBGRBBRBGBBRGRRBBGBRRRBRGGRRGGRGGRGRRRBRRBRBGRBGGGRGRBGGRRRRRBBGBBGBRBBBRGRGBGGGRBRGRBBBRBBBRGRBBRGRGBRRGGGRBRRBGBGGRRRRRGBBGBRGGBGRGGBBGBRGGBRRBRRGGBBRBRRBBRGRBRRGGRGRGBGGRBBRGRGBBGGRGBRBGRGBRRGRRBRBBRBGRBGRRRRGBRRBBBGGGGGRRGBBBBBBGRBGRRGBRRGRGGRBGRRRRBBGBBRBBBBGBGGGRGBGGBRRGGGRBGRGGBGBRRBBBBRBRBBBBRBBBBRGRGRRRGGGRRGBRRGGBBRBRGGRBRGRRGRBGBGGGBBBBGGGRGGRGGRGRGBBBGRGGBGGRRBGBBGGGGRBRGGGRGGGGBRGRRRRGRBGGRGGGBRGBRRRGGBBGBRGBGGRGRRBRBRRBBRBGBGRGRBRGGRGBGRBRBRGGBBGGBRBBRBRGBGGRRGRBRGRGBBBRGRBGBGBBGRRGGGBGRBBBBGBRRBRRGRGBRRRGRBRRGBGBRGGBGBGRRGGBGGGBRBBRRRGGBBBRGBRGGRBBRBGBGGBBBGGBBRGGBBBBBRRRBGRGGRBRBRBGRGBGGGBBBRGBGBGRRGBBBGGGGRRBGRGBGGBRGBGGGGGBRRBRBBGBBBGGBRRBGGRGRRRRGRBRGBGRBRBGRRBRRRGGBBBRBRGRBRRBGBGBBRBRRBBBRGGGRBBRGBRGBBGBRRBGGRGGGRRBGBGRRGRGRBBBBRBBRGBRRGBBRRBGRRBBGBGGGGBRRGBBRBRRGGRBGBRGGBGRBBRBRRBBRRBGBBGBBRRGRRRBBBGRGBRGBGRBBBRBGBGRRRRRGBBBRRGRRBRBRRRGGBRRGGBGGRGGBGRRRGBBRGBRGBBBGBRBRBRBBBGRGGGGRGBBBRBBRBBGGRRBBGRBBRBRBBRRRRBRRRRBGGRRRGGRGRGGRGRBRBBBRRRBGBBRRBBRRGGGGRGRRRGRGRGRBRGGGGRBRBGBGBRRRGBBRGRBBBBBGBRRGGBBBGBRRBGRGRRGBGBGRGGRGGGRGBGGGRGBRRRGBGGGGBBGBRBGRRBRGBGBGBRBRBBRRBGBGBBRGBBRRBGRBBBRGBRBRBGGRBGRRGRRRGGRGRBBGGBGBGRBRRBGBGGGBGGBRGGGBGBBRBRBRGRGGBBBGGBBBGBRBRGBGBRGRGBRRBRBRRGBBRBBBBBRGBGRGBBRBGBRRBRGGRBRRRGGGBRRRRGRGBGGBGRBRGBBBRRRGBGBGBBBRGBGRRGGBBBBGRGRBBGRBGGRGBBRBBBRBRBBRRRGBBRRRBBGGRRGBBRBRGBBGGGRRGBBRGRBRGGGBBBRBRGRRRRGBBRGGGBGRBBRRRGGRRRBBBRGBGRRGBBBGBGRRRBRBGBBGBRGGGBRRRGGGRRRGRRBGGGRGRGGRRGRGRRRRBGBBGBBRRGRGRBGBGRGBGBGRBRRBRRRBBGGGBRGBGGRRB', 'G'],
]

t0 = time.time()
_test(basic_cases)
t1 = time.time()
print(t1-t0)